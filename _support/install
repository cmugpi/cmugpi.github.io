#!/usr/bin/env bash

# ANSI colors
cnone="$(echo -ne '\033[0m')"
cwhiteb="$(echo -ne '\033[1;37m')"
cwhite="$(echo -ne '\033[0;37m')"
cgray="$(echo -ne '\033[1;30m')"
cblack="$(echo -ne '\033[0;30m')"

cred="$(echo -ne '\033[0;31m')"
credb="$(echo -ne '\033[1;31m')"
cgreen="$(echo -ne '\033[0;32m')"
cgreenb="$(echo -ne '\033[1;32m')"
cyellow="$(echo -ne '\033[0;33m')"
cyellowb="$(echo -ne '\033[1;33m')"
cblue="$(echo -ne '\033[0;34m')"
cblueb="$(echo -ne '\033[1;34m')"
cmagenta="$(echo -ne '\033[0;35m')"
cmagentab="$(echo -ne '\033[1;35m')"
ccyan="$(echo -ne '\033[0;36m')"
ccyanb="$(echo -ne '\033[1;36m')"

echo $cwhite
echo "********************************************************************************"
echo "*                                                                              *"
echo "*                        Great Practical Ideas Website                         *"
echo "*                                 Installation                                 *"
echo "*                                                                              *"
echo "********************************************************************************"
echo $cnone


# check dependencies
which gem &> /dev/null || {
  echo "${cred}Requires gem.${cnone}"
  echo "See 'Installing rbenv' and 'Building a Ruby Version' in README.md"
  exit
}
which virtualenvwrapper.sh &> /dev/null || {
  echo "${cred}Requires virtualenvwrapper.${cnone}"
  echo "See 'Installing virtualenvwrapper' in README.md"
  echo "Note: virtualenvwrapper.sh must be in your PATH, so make sure it is."
  exit
}

# source virtualenvwrapper so we can use it
echo "${cwhite}==>${cnone} Sourcing virtualenvwrapper.sh helper file..."
source virtualenvwrapper.sh

if [ "$?" != "0" ]; then
  echo "${cred}Error sourcing virtualenvwrapper.sh.${cnone}"
  exit 1
fi

# read input and create python virtual env
echo
echo "${cwhite}==>${cnone} Creating a (python) virtual environment to manage RubyGems dependencies..."
echo "Please enter a name for this environment:"
read -e -p "> " virtualenv_name
if [ -z "$virtualenv_name" ]; then
  exit 1
fi
virtualenv_caps=$(echo $virtualenv_name | tr '[:lower:]' '[:upper:]')
mkvirtualenv $virtualenv_name
if [ "$?" != "0" ]; then
  echo "${cred}Error creating virtual environment ${virtualenv_name}.${cnone}"
  exit 1
fi
echo "Created virtualenv at ${cblue}${virtualenv_name}${cnone}."

# Stash the VIRTUAL_ENV path
virtualenv_prefix="$VIRTUAL_ENV"

# Deactivate before using Ruby commands (so these changes can take effect)
deactivate

# Initialize virtualenv postactivate script to set environment vars
if [ "$(wc -l < "$HOME/.virtualenvs/postactivate")" -le 4 ]; then
  echo
  echo "${cwhite}==>${cnone} Initializing virtualenv postactivate script to sandbox RubyGems..."
  cat << EOF >> "$virtualenv_prefix/bin/postactivate"

# -- added by gpi www \`make install\` --
export OLD_${virtualenv_caps}_GEMHOME="\$GEM_HOME"
export GEM_HOME="\$VIRTUAL_ENV/gems"

export OLD_${virtualenv_caps}_GEM_PATH="\$GEM_PATH"
export GEM_PATH=""

export OLD_${virtualenv_caps}_PATH="\$PATH"
export PATH="\$PATH:\$GEM_HOME/bin"
# -------------------------------------
EOF
  echo "Done. See ${cblue}$virtualenv_prefix/bin/postactivate${cnone} for what was added."
else
  echo "${cred}Virtualenv postactivate script not initialized. You should do this yourself.${cnone}"
fi

# Initialize virtualenv predeactivate to unset environment vars
if [ "$(wc -l < "$HOME/.virtualenvs/predeactivate")" -le 4 ]; then
  echo
  echo "${cwhite}==>${cnone} Initializing virtualenv predeactivate script to turn off sandboxing..."
  cat << EOF >> "$virtualenv_prefix/bin/predeactivate"

# -- added by gpi www \`make install\` --
export GEM_HOME="\$OLD_${virtualenv_caps}_GEM_HOME"
unset OLD_${virtualenv_caps}_GEM_HOME

export GEM_PATH="\$OLD_${virtualenv_caps}_GEM_PATH"
unset OLD_${virtualenv_caps}_GEM_PATH

export PATH="\$OLD_${virtualenv_caps}_PATH"
unset OLD_${virtualenv_caps}_PATH
# -------------------------------------
EOF
  echo "Done. See ${cblue}$virtualenv_prefix/bin/predeactivate${cnone} for what was added."
else
  echo "${cred}Virtualenv predeactivate script not initialized. You should do this yourself.${cnone}"
fi


# Install Ruby dependencies
####echo
####echo "Installing bundle (outside virtualenv)"
##### We have to install bundler outside of the virtualenv or else rbenv won't be
##### able to find it
####echo ">> gem install bundler"
####gem install bundler
####rbenv rehash

echo
echo "Installing bundle (inside virtualenv)"
workon $virtualenv_name
gem install bundler

echo
echo "${cwhite}==>${cnone} Installing gems to virtual env..."
echo ">> bundle install"
bundle install
# We don't have to run rbenv rehash here because rbenv doesn't even know gems
# were installed! They are sort of "hidden" by the virtualenv
deactivate

echo $cwhite
echo "********************************************************************************"
echo "*                                                                              *"
echo "*  Done!                                                                       *"
echo "*                                                                              *"
echo "*  To start working on the project, READ THE README (please actually do it).   *"
echo "*  You'll also need to run                                                     *"
echo "*                                                                              *"
echo "*      workon <virtualenv name>                                                *"
echo "*                                                                              *"
echo "*  every time you want to do work. Thanks!                                     *"
echo "*                                                                              *"
echo "********************************************************************************"
echo $cnone

